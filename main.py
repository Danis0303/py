import asyncio
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import CallbackQuery, Message
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.types.message import ContentType

session = AiohttpSession(proxy='http://proxy.server:3128')  # –≤ proxy —É–∫–∞–∑–∞–Ω –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä pythonanywhere, –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

TOKEN = '6924307353:AAFvh9QWhOm8vx5z6jIf_u49xmlUGv4dSgY'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
API = 'c1b2aac246ad72c2775da986a41f7c21'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API-–∫–ª—é—á OpenWeatherMap

bot = Bot(token=TOKEN, session=session)
dp = Dispatcher()  # –°–æ–∑–¥–∞—ë–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä


@dp.message(Command("start"))
async def start(message: Message):
    await send_city_selection(message.chat.id)


@dp.callback_query(F.data)
async def callback_query(call: CallbackQuery):
    if call.data == "enter_city":
        await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    elif call.data == "back":
        await send_city_selection(call.message.chat.id)  # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
    else:
        await send_weather(call.message.chat.id, call.data)


@dp.message(F.text)
async def get_weather(message: Message):
    city = message.text.strip().lower()
    await send_weather(message.chat.id, city)


async def send_city_selection(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≥–æ—Ä–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä—É—á–Ω—É—é"""
    markup = InlineKeyboardBuilder()
    markup.add(
        InlineKeyboardButton(text="–ú–æ—Å–∫–≤–∞", callback_data="–ú–æ—Å–∫–≤–∞"),
        InlineKeyboardButton(text="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", callback_data="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"),
        InlineKeyboardButton(text="–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", callback_data="–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"),
    )
    markup.adjust(1)  # –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ 2 –≤ —Ä—è–¥

    await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é:", reply_markup=markup.as_markup())


async def send_weather(chat_id, city):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≥–æ–¥—É"""
    try:
        res = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API}&units=metric')
        data = res.json()

        if res.status_code == 200:
            weather = data['weather'][0]['description']
            temp = data['main']['temp']
            feels_like = data['main']['feels_like']
            humidity = data['main']['humidity']

            response = (f"üåç –ü–æ–≥–æ–¥–∞ –≤ {city.capitalize()}:\n"
                        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                        f"ü§í –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
                        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                        f"‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: {weather.capitalize()}")

            # –ö–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å", "–í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –∑–∞–Ω–æ–≤–æ", "–ö—É–ø–∏—Ç—å –º–Ω–µ –∫–æ—Ñ–µ" (—Å—Å—ã–ª–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞) –∏ "–ù–∞–∑–∞–¥"
            markup = InlineKeyboardBuilder()
            markup.add(
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=city),
                InlineKeyboardButton(text="üìù –í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –∑–∞–Ω–æ–≤–æ", callback_data="enter_city"),
                InlineKeyboardButton(text="‚òï –ö—É–ø–∏—Ç—å –º–Ω–µ –∫–æ—Ñ–µ", url='https://t.me/kofeemeBot'),
            )
            markup.adjust(1)  # –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ 2 –≤ —Ä—è–¥

        else:
            response = "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
            markup = None

    except Exception:
        response = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        markup = None

    await bot.send_message(chat_id, response, reply_markup=markup.as_markup() if markup else None)


async def main():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())